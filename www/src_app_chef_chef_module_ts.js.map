{"version":3,"file":"src_app_chef_chef_module_ts.js","mappings":"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","sources":["./src/app/chef/chef-routing.module.ts","./src/app/chef/chef.module.ts","./src/app/chef/chef.page.ts","./src/app/chef/chef.page.html"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ChefPage } from './chef.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ChefPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ChefPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ChefPageRoutingModule } from './chef-routing.module';\n\nimport { ChefPage } from './chef.page';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    TranslateModule,\n    ChefPageRoutingModule\n  ],\n  declarations: [ChefPage]\n})\nexport class ChefPageModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { DataService, Recipe } from '../services/data.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-chef',\n  templateUrl: './chef.page.html',\n  styleUrls: ['./chef.page.scss'],\n})\nexport class ChefPage implements OnInit {\n  recipeForm: FormGroup;\n  isEditing: boolean = false;\n  mediaFiles: File[] = [];\n  mediaUrls: string[] = [];\n  category: string;\n  recipe: Recipe;\n  constructor(private route: ActivatedRoute, private fb: FormBuilder, private dataService: DataService, private router: Router) {\n    this.recipeForm = this.fb.group({\n      name: ['', Validators.required],\n      ethnicity: ['', Validators.required],\n      category: ['', Validators.required],\n      time: ['', Validators.required],\n      servings: ['', Validators.required],\n      ingredients: this.fb.array([this.createIngredient()]), // Initialize with one ingredient input     \n      pics: this.fb.array([]),\n      directions: this.fb.array([this.createDirection()]) // Initialize with one direction input\n    });\n  }\n\n\n  populateFormWithExistingData() {\n    // Fetch the existing recipe data (e.g., from a service or route data)\n    const existingRecipeData: Recipe = this.recipe // Fetch the existing recipe data\n\n    // Use patchValue to populate the top-level form controls with the existing data\n    this.recipeForm.patchValue(existingRecipeData);\n\n    // Handle the ingredients FormArray\n    const ingredientsArray = this.recipeForm.get('ingredients') as FormArray;\n    ingredientsArray.clear(); // Clear the existing ingredients array\n\n    if (existingRecipeData.ingredients && existingRecipeData.ingredients.length > 0) {\n      for (const ingredient of existingRecipeData.ingredients) {\n        // Create a FormGroup for each ingredient\n        const ingredientGroup = this.fb.group({\n          name: [ingredient.name, Validators.required],\n          amount: [ingredient.amount, Validators.required],\n          //icon: [ingredient.icon] // You can add more validators if needed\n        });\n\n        ingredientsArray.push(ingredientGroup); // Push the FormGroup to the ingredients array\n      }\n    }\n\n    // Handle the directions FormArray similarly\n    const directionsArray = this.recipeForm.get('directions') as FormArray;\n    directionsArray.clear(); // Clear the existing directions array\n\n    if (existingRecipeData.directions && existingRecipeData.directions.length > 0) {\n      for (const direction of existingRecipeData.directions) {\n        // Create a FormGroup for each direction\n        const directionGroup = this.fb.group({\n          description: [direction.description, Validators.required],\n          time: [direction.time, Validators.required]\n        });\n\n        directionsArray.push(directionGroup); // Push the FormGroup to the directions array\n      }\n    }\n    // Handle the pics array\n    const picsArray = this.recipeForm.get('pics') as FormArray;\n    picsArray.clear(); // Clear the existing pics array\n\n    if (existingRecipeData.pics && existingRecipeData.pics.length > 0) {\n      for (const picUrl of existingRecipeData.pics) {\n        // Push each pic URL to the mediaUrls array\n        this.mediaUrls.push(picUrl);\n\n        // You can also push an empty control to the pics FormArray if needed\n        // picsArray.push(this.fb.control(''));\n      }\n    }\n\n    // Handle mediaUrls and mediaFiles based on your application's logic\n  }\n\n\n  createIngredient(): FormGroup {\n    return this.fb.group({\n      name: ['', Validators.required],\n      amount: ['', Validators.required],\n      icon: [''] // You can add more validators if needed\n    });\n  }\n\n  addIngredient(): void {\n    const ingredients = this.recipeForm.get('ingredients') as FormArray;\n    ingredients.push(this.createIngredient());\n  }\n\n  removeIngredient(index: number): void {\n    const ingredients = this.recipeForm.get('ingredients') as FormArray;\n    if (ingredients.length > 1) {\n      ingredients.removeAt(index);\n    }\n  }\n\n  createDirection(): FormGroup {\n    return this.fb.group({\n      description: ['', Validators.required],\n      time: ['', Validators.required]\n    });\n  }\n  removeDirection(index: number) {\n    const directions = this.recipeForm.get('directions') as FormArray;\n    if (directions.length > 1) {\n      directions.removeAt(index);\n    }\n\n  }\n  addDirection(): void {\n    const directions = this.recipeForm.get('directions') as FormArray;\n    directions.push(this.createDirection());\n  }\n\n  onFileChange(event: any) {\n    const files: FileList = event.target.files;\n    for (let i = 0; i < files.length; i++) {\n      this.mediaFiles.push(files[i]);\n      this.previewMedia(files[i]);\n    }\n\n  }\n\n  isVideo(url: string): boolean {\n    // Extract the file extension from the URL\n    const fileExtension = url.split('.').pop().toLowerCase();\n\n    // Define a list of video file extensions (you can add more)\n    const videoExtensions = ['mp4', 'avi', 'mov', 'mkv', 'wmv'];\n\n    // Check if the file extension is in the list of video extensions\n    if (videoExtensions.includes(fileExtension))\n      return true;\n  }\n\n  isImage(url: string): boolean {\n    // Extract the file extension from the URL\n    const fileExtension = url.split('.').pop().toLowerCase();\n\n    // Define a list of common image file extensions (you can add more)\n    const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'];\n\n    // Check if the file extension is in the list of image extensions\n    if (imageExtensions.includes(fileExtension))\n      return true;\n  }\n\n  previewMedia(file: File) {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = (event) => {\n      this.mediaUrls.push(event.target.result as string);\n    };\n    setTimeout(() => {\n    }, 1000)\n\n  }\n\n  removeMedia(index: number) {\n    this.mediaFiles.splice(index, 1);\n    this.mediaUrls.splice(index, 1);\n  }\n\n  async uploadMedia(formData) {\n    this.dataService.uploadMedia(formData, this.mediaFiles);\n    // Clear mediaFiles and mediaUrls arrays after upload is complete\n    this.mediaFiles = [];\n    this.mediaUrls = [];\n  }\n\n\n\n\n  deleteDirection(index: number): void {\n    const directions = this.recipeForm.get('directions') as FormArray;\n    if (directions.length > 1) {\n      directions.removeAt(index);\n    }\n  }\n  ngOnInit() {\n\n\n    // Access the data passed through the router and assign it to the recipe variable\n    this.recipe = this.route.snapshot.data.recipe;\n    if (this.recipe) {\n      this.isEditing = true;\n\n\n      this.populateFormWithExistingData(); // Call this to populate the form\n    }\n  }\n\n  onSubmit() {\n    if (this.recipeForm.valid) {\n      const formData: Recipe = this.recipeForm.value;\n      this.uploadMedia(formData);\n      this.recipeForm.reset();\n      this.router.navigate(['/home'])\n    }\n    else {\n      // Form is not valid, mark all form controls as touched to display error messages\n      this.markFormGroupTouched(this.recipeForm);\n    }\n\n\n  }\n\n  markFormGroupTouched(formGroup: FormGroup) {\n    Object.values(formGroup.controls).forEach((control) => {\n      if (control instanceof FormGroup) {\n        this.markFormGroupTouched(control);\n      } else {\n        control.markAsTouched();\n      }\n    });\n  }\n\n}\n\n","export default \"<ion-content>\\n  <form [formGroup]=\\\"recipeForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n    <div>\\n      <label>recipe Name:</label>\\n      <input type=\\\"text\\\" placeholder=\\\"Fried Okra\\\" formControlName=\\\"name\\\" required>\\n      <ion-text *ngIf=\\\"recipeForm.get('name').invalid && recipeForm.get('name').touched\\\" color=\\\"danger\\\">Name is\\n        required.</ion-text>\\n    </div>\\n    <div>\\n      <label>ethnicity:</label>\\n      <input type=\\\"text\\\" placeholder=\\\"Ghanian\\\" formControlName=\\\"ethnicity\\\" required>\\n      <ion-text *ngIf=\\\"recipeForm.get('ethnicity').invalid && recipeForm.get('ethnicity').touched\\\"\\n        color=\\\"danger\\\">Ethnicity is required.</ion-text>\\n    </div>\\n    <div>\\n      <label>category:</label>\\n      <ion-text *ngIf=\\\"recipeForm.get('category').invalid && recipeForm.get('category').touched\\\" color=\\\"danger\\\">Category\\n        is required.</ion-text>\\n      <ion-item style=\\\"border: solid 0.5px;\\\">\\n        <ion-select formControlName=\\\"category\\\" placeholder=\\\"{{ 'dinner' | translate }}\\\">\\n          <ion-select-option value=\\\"Breakfast\\\">{{'breakfast' | translate}}</ion-select-option>\\n          <ion-select-option value=\\\"Beverages\\\">{{'beverages' | translate}}</ion-select-option>\\n          <ion-select-option value=\\\"Appetizer\\\">{{'apps' | translate}}</ion-select-option>\\n          <ion-select-option value=\\\"Dinner\\\">{{'dinner' | translate}}</ion-select-option>\\n          <ion-select-option value=\\\"Dessert\\\">{{'dessert' | translate}}</ion-select-option>\\n        </ion-select>\\n      </ion-item>\\n    </div>\\n    <div>\\n      <label>time:</label>\\n      <input type=\\\"text\\\" placeholder=\\\"20 min\\\" formControlName=\\\"time\\\" required>\\n      <ion-text *ngIf=\\\"recipeForm.get('time').invalid && recipeForm.get('time').touched\\\" color=\\\"danger\\\">Time is\\n        required.</ion-text>\\n\\n    </div>\\n    <div class=\\\"extras\\\">\\n      <label>servings:</label>\\n      <input type=\\\"number\\\" placeholder=\\\"8\\\" formControlName=\\\"servings\\\" required>\\n      <ion-text *ngIf=\\\"recipeForm.get('servings').invalid && recipeForm.get('servings').touched\\\" color=\\\"danger\\\">Servings\\n        are required.</ion-text>\\n    </div>\\n\\n    <hr>\\n\\n    <div class=\\\"extras\\\" formArrayName=\\\"ingredients\\\">\\n      <label>ingredients:</label>\\n      <ion-text *ngIf=\\\"recipeForm.get('ingredients').invalid && recipeForm.get('ingredients').touched\\\"\\n        color=\\\"danger\\\">Ingredients are required.</ion-text>\\n      <div *ngFor=\\\"let ingredient of recipeForm.get('ingredients').controls; let i = index\\\">\\n        <div [formGroup]=\\\"ingredient\\\">\\n          <input type=\\\"text\\\" formControlName=\\\"name\\\" placeholder=\\\"Ingredient Name\\\" required>\\n          <input type=\\\"text\\\" formControlName=\\\"amount\\\" placeholder=\\\"Amount\\\" required>\\n          <!-- <input type=\\\"text\\\" formControlName=\\\"icon\\\" placeholder=\\\"Icon (Optional)\\\"> -->\\n          <button type=\\\"button\\\" *ngIf=\\\"recipeForm.get('ingredients').controls.length > 1 && i > 0\\\"\\n            (click)=\\\"removeIngredient(i)\\\">Remove</button>\\n        </div>\\n      </div>\\n      <button type=\\\"button\\\" (click)=\\\"addIngredient()\\\">Add Ingredient</button>\\n    </div>\\n\\n    <hr>\\n\\n    <hr style=\\\"border-color: black;\\\">\\n    <div class=\\\"extras\\\" formArrayName=\\\"directions\\\">\\n      <label>directions:</label>\\n      <ion-text *ngIf=\\\"recipeForm.get('directions').invalid && recipeForm.get('directions').touched\\\"\\n        color=\\\"danger\\\">Directions are required.</ion-text>\\n      <div *ngFor=\\\"let direction of recipeForm.get('directions').controls; let i = index\\\">\\n        <div [formGroup]=\\\"direction\\\">\\n          <input type=\\\"text\\\" formControlName=\\\"description\\\" placeholder=\\\"Description\\\" required>\\n          <input type=\\\"text\\\" formControlName=\\\"time\\\" placeholder=\\\"Time\\\" required>\\n          <button type=\\\"button\\\" *ngIf=\\\"recipeForm.get('directions').controls.length > 1\\\"\\n            (click)=\\\"removeDirection(i)\\\">Remove</button>\\n        </div>\\n      </div>\\n      <button type=\\\"button\\\" (click)=\\\"addDirection()\\\">Add Direction</button>\\n    </div>\\n\\n    <hr>\\n\\n    <label>Upload Pics & Videos</label>\\n    <input type=\\\"file\\\" accept=\\\"image/*, video/*\\\" (change)=\\\"onFileChange($event)\\\" multiple>\\n    <div formArrayName=\\\"pics\\\">\\n\\n      <div *ngFor=\\\"let url of mediaUrls; let i = index\\\">\\n        <img [src]=\\\"url\\\" width=\\\"100\\\" height=\\\"100\\\" *ngIf=\\\"isImage(url)\\\">\\n        <video [src]=\\\"url\\\" controls *ngIf=\\\"isVideo(url) \\\"></video>\\n        <button type=\\\"button\\\" (click)=\\\"removeMedia(i)\\\">Remove Picture </button>\\n      </div>\\n    </div>\\n\\n\\n    <button type=\\\"submit\\\" [disabled]=\\\"recipeForm.invalid && !isEditing\\\">Submit</button>\\n    <button type=\\\"button\\\" *ngIf=\\\"isEditing\\\" (click)=\\\"onEditClick()\\\">Edit Recipe</button>\\n  </form>\\n</ion-content>\";"],"names":[],"sourceRoot":"webpack:///"}